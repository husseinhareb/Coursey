// src/app/services/auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { tap, map } from 'rxjs/operators';
import { Observable } from 'rxjs';
import { environment } from '../environments/environment';

interface TokenResponse {
  access_token: string;
  token_type: string;
}

@Injectable({ providedIn: 'root' })
export class AuthService {
  private tokenKey = 'token';
  private apiBase = environment.apiUrl;

  constructor(private http: HttpClient, private router: Router) {}

  /**
   * Attempt to log in. On success, stores JWT and returns true.
   */
  login(email: string, password: string): Observable<boolean> {
    return this.http
      .post<TokenResponse>(`${this.apiBase}/auth/login`, { email, password })
      .pipe(
        tap(res => localStorage.setItem(this.tokenKey, res.access_token)),
        map(() => true)
      );
  }

  /**
   * Sign up a new user. On success, stores JWT and returns true.
   */
  signup(
    email: string,
    firstName: string,
    lastName: string,
    username: string,
    password: string,
    passwordAutoGenerated: boolean
  ): Observable<boolean> {
    const payload = {
      email,
      first_name: firstName,
      last_name: lastName,
      username,
      password,
      password_auto_generated: passwordAutoGenerated
    };
    return this.http
      .post<TokenResponse>(`${this.apiBase}/auth/signup`, payload)
      .pipe(
        tap(res => localStorage.setItem(this.tokenKey, res.access_token)),
        map(() => true)
      );
  }

  /**
   * Log the user out and redirect to login page.
   */
  logout(): void {
    localStorage.removeItem(this.tokenKey);
    this.router.navigate(['/login']);
  }

  /**
   * Current JWT token, or null if not set.
   */
  get token(): string | null {
    return localStorage.getItem(this.tokenKey);
  }

  /**
   * Whether a user is currently logged in.
   */
  get isLoggedIn(): boolean {
    return !!this.token;
  }
}
